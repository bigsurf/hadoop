{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation Template: Create a VPC and add a Bastion host EC2 instance with an Elastic IP address and a security group.",
  "Parameters": {
    "Environment": {
      "Description": "The name of the environment you are creating (e.g. dev, staging, prod)",
      "Type": "String",
      "AllowedPattern": "^(?!\\-)(?:[a-zA-Z\\d\\-]{0,62}[a-zA-Z\\d])$",
      "AllowedValues": [
        "dev",
        "staging",
        "prod"
      ],
      "ConstraintDescription": "Must be an alphanumeric name (dashes are allowed, except as the first/last character)."
    },
    "HadoopInstanceType": {
      "Description": "WebServer EC2 instance type",
      "Type": "String",
      "Default": "d2.4xlarge",
      "AllowedValues": [
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "d2.xlarge",
        "d2.2xlarge",
        "d2.4xlarge",
        "d2.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "BastionInstanceType": {
      "Description": "NAT EC2 instance type",
      "Type": "String",
      "Default": "t2.medium",
      "AllowedValues": [
        "t2.medium",
        "m3.medium"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "VPCNetworkPrefix": {
      "Description": "The network prefix (first 2 octets of an IP address) to be used for the VPCs internal network.",
      "Type": "String",
      "Default": "10.0",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})"
    },
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the BastionHost instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default" : "dev",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "SSHLocation": {
      "Description": " The IP address range that can be used to SSH to the EC2 instances",
      "Type": "String",
      "MinLength": "9",
      "MaxLength": "18",
      "Default": "72.21.196.0/24",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    }
  },
  "Mappings": {
    "RegionalAMIs": {
      "us-east-1": {
        "Hadoop": "ami-0d28fe66"
      },
      "us-west-2": {
        "Hadoop": "ami-0ff3f13f"
      },
      "us-west-1": {
        "Hadoop": "ami-498a780d"
      },
      "eu-west-1": {
        "Hadoop": "ami-74d29c03"
      },
      "eu-central-1": {
        "Hadoop": "ami-8c96ac91"
      },
      "ap-northeast-1": {
        "Hadoop": "ami-74379d74"
      },
      "ap-northeast-2": {
        "Hadoop": "ami-18cc0276"
      },
      "ap-southeast-1": {
        "Hadoop": "ami-f6edeea4"
      },
      "ap-southeast-2": {
        "Hadoop": "ami-7b0d4b41"
      },
      "sa-east-1": {
        "Hadoop": "ami-d5d35cc8"
      }
    },
    "SubnetMap": {
      "VPC": {
        "CIDR": "0.0/16"
      },
      "Public": {
        "A": "1.0/24"
      },
      "Private": {
        "A": "2.0/24"
      }
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VPCNetworkPrefix"
              },
              {
                "Fn::FindInMap": [
                  "SubnetMap",
                  "VPC",
                  "CIDR"
                ]
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "vpc"
                ]
              ]
            }
          }
        ]
      }
    },
    "PublicSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VPCNetworkPrefix"
              },
              {
                "Fn::FindInMap": [
                  "SubnetMap",
                  "Public",
                  "A"
                ]
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "subnet-public"
                ]
              ]
            }
          }
        ]
      }
    },

    "EIPForNATGateway" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc"
      }
    },

    "NATGateway" : {
      "Type" : "AWS::EC2::NatGateway",
      "DependsOn" : "PublicSubnet",
      "Properties" : {
        "AllocationId" : { "Fn::GetAtt" : [ "EIPForNATGateway", "AllocationId" ] },
        "SubnetId" : { "Ref" : "PublicSubnet" }
      }
    },
    "PrivateSubnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Fn::Join": [
            ".",
            [
              {
                "Ref": "VPCNetworkPrefix"
              },
              {
                "Fn::FindInMap": [
                  "SubnetMap",
                  "Private",
                  "A"
                ]
              }
            ]
          ]
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "subnet-private"
                ]
              ]
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DependsOn": "VPC",
      "Properties": {
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "igw"
                ]
              ]
            }
          }
        ]
      }
    },
    "AttachInternetGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "DependsOn": "InternetGateway",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "rt-public"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateRouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackId"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "rt-private"
                ]
              ]
            }
          }
        ]
      }
    },
    "PrivateRoute" : {
      "Type" : "AWS::EC2::Route",
      "DependsOn" : [ "PrivateRouteTable", "NATGateway" ],
      "Properties" : {
        "RouteTableId" : { "Ref" : "PrivateRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "NatGatewayId" : { "Ref" : "NATGateway" }
      }
    },
    "PublicRoute": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachInternetGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PublicSubnet"
        },
        "RouteTableId": {
          "Ref": "PublicRouteTable"
        }
      }
    },
    "PrivateSubnetRouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {
          "Ref": "PrivateSubnet"
        },
        "RouteTableId": {
          "Ref": "PrivateRouteTable"
        }
      }
    },
    "BastionSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Enable SSH access via port 22",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": {
              "Ref": "SSHLocation"
            }
          }
        ]
      }
    },
    "ELBSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription": "Enable HTTP access to the load balancer on port 80.",
            "VpcId": { "Ref": "VPC" },
            "SecurityGroupIngress": [
                {
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "CidrIp": "199.172.169.0/24"
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "CidrIp": "69.191.241.0/25"
                },
                {
                    "IpProtocol": "tcp",
                    "FromPort": "80",
                    "ToPort": "80",
                    "CidrIp": "74.73.25.144/32"
                }
            ]
        }
    },
    "LambdaSecurityGroup": {
        "Type": "AWS::EC2::SecurityGroup",
        "Properties": {
            "GroupDescription": "Enable Lambda to reach Ambari on 8080",
            "VpcId": { "Ref": "VPC" }
        }
    },
    "AmbariSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": [
        "BastionSecurityGroup"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Base security group for Ambari instances.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": { "Ref": "ELBSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "8080",
            "ToPort": "8080",
            "SourceSecurityGroupId": { "Ref": "LambdaSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1024",
            "ToPort": "65535",
            "CidrIp": {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "VPCNetworkPrefix"
                  },
                  {
                    "Fn::FindInMap": [
                      "SubnetMap",
                      "Private",
                      "A"
                    ]
                  }
                ]
              ]
            }
          }
        ]
      }
    },
    "HadoopSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "DependsOn": [
        "BastionSecurityGroup", "AmbariSecurityGroup"
      ],
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "GroupDescription": "Base security group for Hadoop instances.",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": { "Ref": "BastionSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "SourceSecurityGroupId": { "Ref": "AmbariSecurityGroup" }
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "1024",
            "ToPort": "65535",
            "CidrIp": {
              "Fn::Join": [
                ".",
                [
                  {
                    "Ref": "VPCNetworkPrefix"
                  },
                  {
                    "Fn::FindInMap": [
                      "SubnetMap",
                      "Private",
                      "A"
                    ]
                  }
                ]
              ]
            } 
          }
        ]
      }
    },
    "BastionHostInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionalAMIs",
            {
              "Ref": "AWS::Region"
            },
            "Hadoop"
          ]
        },
        "InstanceType": {
          "Ref": "BastionInstanceType"
        },
        "KeyName": {
          "Ref": "KeyName"
        },
        "InstanceInitiatedShutdownBehavior": "stop",
        "DisableApiTermination": "false",
        "NetworkInterfaces": [
          {
            "GroupSet": [
              {
                "Ref": "BastionSecurityGroup"
              }
            ],
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "DeleteOnTermination": "true",
            "SubnetId": {
              "Ref": "PublicSubnet"
            }
          }
        ],
        "Tags": [
          {
            "Key": "Application",
            "Value": {
              "Ref": "AWS::StackName"
            }
          },
          {
            "Key": "Name",
            "Value": {
              "Fn::Join": [
                "-",
                [
                  {
                    "Ref": "Environment"
                  },
                  {
                    "Ref": "AWS::Region"
                  },
                  {
                    "Ref": "AWS::StackName"
                  },
                  "bastion"
                ]
              ]
            }
          }
        ]
      }
    },
    "EIPForBastionHost": {
      "Type": "AWS::EC2::EIP",
      "DependsOn": "BastionHostInstance",
      "Properties": {
        "Domain": {
          "Ref": "VPC"
        },
        "InstanceId": {
          "Ref": "BastionHostInstance"
        }
      }
    }
  },
  "Outputs": {
    "VpcId": {
      "Description": "VpcId of the newly created VPC",
      "Value": {
        "Ref": "VPC"
      }
    },
    "BastionHostPublicIP": {
      "Description": "Public IP of the Bastion instances",
      "Value": {
        "Fn::GetAtt": [
          "BastionHostInstance",
          "PublicIp"
        ]
      }
    },
    "PublicSubnet": {
      "Description": "SubnetId of the primary public subnet",
      "Value": {
        "Ref": "PublicSubnet"
      }
    },
    "PrivateSubnet": {
      "Description": "SubnetId of the primary private subnet",
      "Value": {
        "Ref": "PrivateSubnet"
      }
    },
    "AvailabilityZone": {
      "Description": "The Availability Zones the Subnets were created in",
      "Value": {
        "Fn::GetAtt": [
          "BastionHostInstance",
          "AvailabilityZone"
        ]
      }
    },
    "HadoopSecurityGroup": {
      "Description": "SecurityGroupId for Hadoop",
      "Value": {
        "Ref": "HadoopSecurityGroup"
      }
    },
    "ELBSecurityGroup": {
      "Description": "SecurityGroupId for ELB",
      "Value": {
        "Ref": "ELBSecurityGroup"
      }
    },
    "AmbariSecurityGroup": {
      "Description": "SecurityGroupId for Ambari",
      "Value": {
        "Ref": "AmbariSecurityGroup"
      }
    },
    "BastionSecurityGroup": {
      "Description": "SecurityGroupId for allowing RDP Access",
      "Value": {
        "Ref": "BastionSecurityGroup"
      }
    },
    "LambdaSecurityGroup": {
      "Description": "SecurityGroupId for Lambda function",
      "Value": {
        "Ref": "LambdaSecurityGroup"
      }
    },
    "EIPForNATGateway": {
      "Description": "EIP for NAT gateway",
      "Value": {
        "Ref": "EIPForNATGateway"
      }
    }
  }
}